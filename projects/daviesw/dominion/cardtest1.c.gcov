        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        1:    9:int testSmithy () {
        -:   10:
        -:   11:    int i;
        1:   12:    int drawn = 3;
        1:   13:    int discarded = 1;
        1:   14:    int seed = 1000;
        1:   15:    int numPlayers = 2;
        1:   16:    int thisPlayer = 0;
        1:   17:    int bonus = 0;
        -:   18:    struct gameState state, testState;
        1:   19:    int king[10] = {smithy, tribute, sea_hag, cutpurse, mine, minion, village, embargo, gardens, adventurer};
        1:   20:    int handPos = 0;
        -:   21:    //int curCount = testState.handCount[thisPlayer];
        -:   22:    //int curCard;    
        -:   23:    
        1:   24:    int testPassed = 1;
        1:   25:    initializeGame(numPlayers, king, seed, &state);
        -:   26:    
        1:   27:    int deckCounter = state.deckCount[thisPlayer];
        1:   28:    int expectedCards[3] = {state.deck[thisPlayer][(deckCounter - 1)], state.deck[thisPlayer][(deckCounter - 2)], state.deck[thisPlayer][(deckCounter - 3)]};
        -:   29:    
        1:   30:    memcpy(&testState, &state, sizeof(struct gameState));
        -:   31:    
        1:   32:    printf("\n\nTESTING SMITHY\n\n");
        1:   33:    cardEffect(smithy, 0, 0, 0, &testState, handPos, &bonus);
        -:   34:
        1:   35:    if (testState.handCount[thisPlayer] == (state.handCount[thisPlayer] + drawn - discarded)) {
        1:   36:        printf("HANDCOUNT INCREASE TEST: PASSED\n");
        -:   37:    }
        -:   38:    else {
    #####:   39:        printf("HANDCOUNT INCREASE TEST: FAILED\n");
    #####:   40:        testPassed = 0;
        -:   41:    }
        -:   42:
        1:   43:    if (testState.deckCount[thisPlayer] == (state.deckCount[thisPlayer] - drawn)) {
        1:   44:        printf("DECKCOUNT DECREASE TEST: PASSED\n");
        -:   45:    }
        -:   46:    else {
    #####:   47:        printf("DECKCOUNT DECREASE TEST: FAILED\n");
    #####:   48:        testPassed = 0;
        -:   49:    }
        -:   50:
        1:   51:    if ((testState.playedCards[(testState.playedCardCount - 1)] == state.hand[thisPlayer][handPos])
        1:   52:    && (testState.playedCardCount == state.playedCardCount + 1)) {
        1:   53:        printf("PLAYEDCARD HAS PLAYED CARD TEST: PASSED\n");
        1:   54:        printf("PLAYEDCARDCOUNT INCREASE TEST: PASSED\n");
        -:   55:    }
        -:   56:    else {
    #####:   57:        printf("PLAYEDCARD HAS PLAYED CARD TEST: FAILED\n");
    #####:   58:        printf("PLAYEDCARDCOUNT INCREASE TEST: FAILED\n");
    #####:   59:        testPassed = 0;
        -:   60:    }
        -:   61:
        1:   62:    if ((testState.hand[thisPlayer][handPos] == expectedCards[2])) {
        -:   63:
        1:   64:        printf("PLAYED CARD'S POSITION OCCUPIED BY NEW CARD TEST: PASSED\n");
        -:   65:    }    
        -:   66:    else {
    #####:   67:        printf("PLAYED CARD'S POSITION OCCUPIED BY NEW CARD TEST: FAILED\n");
    #####:   68:        testPassed = 0;
        -:   69:    }
        -:   70:
        1:   71:    if (testState.hand[thisPlayer][(testState.handCount[thisPlayer])] == -1) {
        1:   72:        printf("POSITION FORMERLY OCCUPIED NOW VALUED AT -1 TEST: PASSED\n");
        -:   73:    }
        -:   74:    else {
    #####:   75:        printf("POSITION FORMERLY OCCUPIED NOW VALUED AT -1 TEST: FAILED\n");
    #####:   76:        testPassed = 0;
        -:   77:    }
        -:   78:
        1:   79:    if ((testState.hand[thisPlayer][ (testState.handCount[thisPlayer] - 2)] == expectedCards[0])
        1:   80:    && (testState.hand[thisPlayer][ (testState.handCount[thisPlayer] - 1)] == expectedCards[1])
        1:   81:    && (testState.hand[thisPlayer][handPos] == expectedCards[2])) {
        1:   82:        printf("CARDS WERE DRAWN FROM TOP OF PLAYER'S DECK TEST: PASSED\n");
        -:   83:
        -:   84:    }
        -:   85:    else {
    #####:   86:        printf("CARDS WERE DRAWN FROM TOP OF PLAYER'S DECK TEST: FAILED\n");
    #####:   87:        testPassed = 1;
        -:   88:    }
        -:   89:
        1:   90:    if (testState.handCount[1] == state.handCount[1]) {
        1:   91:        printf("HANDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: PASSED\n");
        -:   92:    }
        -:   93:    else {
    #####:   94:        printf("HANDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: FAILED\n");
    #####:   95:        printf("ENDING TEST TO AVOID CRASH\n");
    #####:   96:        return 0;
        -:   97:    }
        -:   98:
        1:   99:    if (testState.deckCount[1] == state.deckCount[1]) {
        1:  100:        printf("DECKCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: PASSED\n");
        -:  101:    }
        -:  102:    else {
    #####:  103:        printf("DECKCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: FAILED\n");
    #####:  104:        printf("ENDING TEST TO AVOID CRASH\n");
    #####:  105:        return 0;
        -:  106:    }
        -:  107:
        1:  108:    if (testState.discardCount[1] == state.discardCount[1]) {
        1:  109:        printf("DISCARDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: PASSED\n");
        -:  110:    }
        -:  111:    else {
    #####:  112:        printf("DISCARDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: FAILED\n");
    #####:  113:        printf("ENDING TEST TO AVOID CRASH\n");
    #####:  114:        return 0;
        -:  115:    }
        -:  116:    
        1:  117:    int changeTestPass = 1;
        -:  118:
        1:  119:    for (i = 0; i < testState.handCount[1]; i++) {
    #####:  120:        if (testState.hand[1][i] != state.hand[1][i]) {
    #####:  121:            printf("OTHER PLAYER'S HAND NOT AFFECTED TEST: FAILED\n");
    #####:  122:            testPassed = 0;
    #####:  123:            changeTestPass = 0;
        -:  124:        }
        -:  125:    }
        -:  126:
        1:  127:    if (changeTestPass == 1) {
        1:  128:        printf("OTHER PLAYER'S HAND NOT AFFECTED TEST: PASSED\n");
        -:  129:    }
        1:  130:    changeTestPass = 1;
        -:  131:
       11:  132:    for (i = 0; i < testState.deckCount[1]; i++) {
       10:  133:        if (testState.deck[1][i] != state.deck[1][i]) {
    #####:  134:            printf("OTHER PLAYER'S DECK NOT AFFECTED TEST: FAILED\n");
    #####:  135:            testPassed = 0;
    #####:  136:            changeTestPass = 0;
        -:  137:        }
        -:  138:    }
        -:  139:
        1:  140:    if (changeTestPass == 1) {
        1:  141:        printf("OTHER PLAYER'S DECK NOT AFFECTED TEST: PASSED\n");
        -:  142:    }
        1:  143:    changeTestPass = 1;
        -:  144:
        -:  145:
        1:  146:    for (i = 0; i < testState.discardCount[1]; i++) {
    #####:  147:        if (testState.discard[1][i] != state.discard[1][i]) {
    #####:  148:            printf("OTHER PLAYER'S DISCARD PILE NOT AFFECTED TEST: FAILED\n");
    #####:  149:            testPassed = 0;
    #####:  150:            changeTestPass = 0;
        -:  151:        }
        -:  152:    }
        -:  153:
        1:  154:    if (changeTestPass == 1) {
        1:  155:        printf("OTHER PLAYER'S DISCARD PILE NOT AFFECTED TEST: PASSED\n");
        -:  156:    }
        1:  157:    changeTestPass = 1;
        -:  158:
       21:  159:    for (i = adventurer; i <= treasure_map; i++) {
       20:  160:        if (testState.supplyCount[i] != state.supplyCount[i]) {
    #####:  161:            printf("VICTORY AND KINGDOM CARDS NOT AFFECTED TEST: FAILED\n");
    #####:  162:            changeTestPass = 0;
    #####:  163:            testPassed = 0;
        -:  164:        }
        -:  165:    }
        -:  166:
        1:  167:    if (changeTestPass == 1) {
        1:  168:        printf("VICTORY AND KINGDOM CARDS NOT AFFECTED TEST: PASSED\n");
        -:  169:    }
        -:  170:
        1:  171:    return testPassed;
        -:  172:}
        -:  173:
        -:  174:
        -:  175:
        -:  176:
        1:  177:int main() 
        -:  178:{
        1:  179:    int result = testSmithy();
        1:  180:    if (result == 1) {
        1:  181:        printf("\nSMITHY TESTS PASSED\n\n");
        -:  182:    }
        -:  183:    else {
    #####:  184:        printf("\nSMITHY TEST(S) FAILED\n\n");
        -:  185:    }
        -:  186:
        1:  187:    return 0;
        -:  188:}
