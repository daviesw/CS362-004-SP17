        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        1:    9:int testKingdom() {
        -:   10:
        -:   11:    int i;
        1:   12:    int firstPassed = 1;
        1:   13:    int secondPassed = 1;
        1:   14:    int thirdPassed = 1;
        1:   15:    int king[10] = {smithy, tribute, sea_hag, cutpurse, mine, minion, village, embargo, gardens, adventurer};
        1:   16:    int *testArray = kingdomCards(king[0], king[1], king[2], king[3], king[4], king[5], king[6], king[7], king[8], king[9]);
        -:   17:
        1:   18:    int *testTwo = kingdomCards(king[9], king[8], king[7], king[6], king[5], king[4], king[3], king[2], king[1], king[0]);
        -:   19:
        1:   20:    printf("TESTING FIRST USE OF testKingdom()\n");
       11:   21:    for (i = 0; i < 10; i++) {
       10:   22:        if (king[i] == testArray[i]) {
       10:   23:            printf("KINGDOM CARD %d PASS\n", (i + 1));
        -:   24:        }
        -:   25:        else {
    #####:   26:            printf("KINGDOM CARD %d FAILED\n", (i + 1));
    #####:   27:            firstPassed = 0;
        -:   28:        }
        -:   29:    }
        1:   30:    printf("SECOND TEST OF testKingdom() WITH ALTERNATE VALUES\n");
       11:   31:    for (i = 0; i < 10; i++) {
       10:   32:        if (king[(9 - i)] == testTwo[i]) {
       10:   33:            printf("KINGDOM CARD %d PASS\n", (i + 1));
        -:   34:        }
        -:   35:        else {
    #####:   36:            printf("KINGDOM CARD %d FAILED\n", (i + 1));
    #####:   37:            secondPassed = 0;
        -:   38:        }
        -:   39:    }
        -:   40:
        1:   41:    printf("COMPARE THE TWO ARRAYS OF KINGDOM CARDS--SHOULD NOT BE THE SAME\n");
       11:   42:    for (i = 0; i < 10; i++) {
       10:   43:        if (testTwo[i] != testArray[i]) {
       10:   44:            printf("KINGDOM CARD %d PASS\n", (i + 1));
        -:   45:        }
        -:   46:        else {
    #####:   47:            printf("KINGDOM CARD %d FAILED\n", (i + 1));
    #####:   48:            thirdPassed = 0;
        -:   49:        }
        -:   50:    }
        -:   51:
        1:   52:    if (firstPassed == 1) {
        1:   53:        printf("FIRST TEST SUCCESSFUL\n");
        -:   54:    }
        -:   55:    else {
    #####:   56:        printf("FIRST TEST FAILED\n");
        -:   57:    }
        -:   58:
        1:   59:    if (secondPassed == 1) {
        1:   60:        printf("SECOND TEST SUCCESSFUL\n");
        -:   61:    }
        -:   62:    else {
    #####:   63:        printf("SECOND TEST FAILED\n");
        -:   64:    }
        -:   65:
        1:   66:    if (thirdPassed == 1) {
        1:   67:        printf("THIRD TEST SUCCESSFUL\n");
        -:   68:    }
        -:   69:    else {
    #####:   70:        printf("THIRD TEST FAILED\n");
        -:   71:    }
        -:   72:
        1:   73:    free(testArray);
        1:   74:    free(testTwo);
        -:   75:
        1:   76:    return 0;
        -:   77:}
        -:   78:
        1:   79:int main() {
        -:   80:
        1:   81:    testKingdom();
        -:   82:
        1:   83:    return 0;
        -:   84:
        -:   85:}
