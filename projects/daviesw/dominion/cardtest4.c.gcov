        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        1:    9:int testAdventurer() {
        -:   10:
        -:   11:    int i;
        1:   12:    int drawn = 4;
        1:   13:    int discarded = 3;
        1:   14:    int seed = 1000;
        1:   15:    int numPlayers = 2;
        1:   16:    int thisPlayer = 1;
        1:   17:    int otherPlayer = 0;
        1:   18:    int bonus = 0;
        -:   19:    struct gameState state, testState;
        1:   20:    int king[10] = {smithy, tribute, sea_hag, cutpurse, mine, minion, village, embargo, gardens, adventurer};
        1:   21:    int handPos = 0;
        -:   22:    //int curCount = testState.handCount[thisPlayer];
        -:   23:    //int curCard;    
        -:   24:    
        1:   25:    int testPassed = 1;
        1:   26:    initializeGame(numPlayers, king, seed, &state);
        -:   27:    
        1:   28:    int deckCounter = state.deckCount[thisPlayer];
        1:   29:    state.deck[thisPlayer][(deckCounter - 1)] = sea_hag;
        1:   30:    state.deck[thisPlayer][(deckCounter - 2)] = copper;
        1:   31:    state.deck[thisPlayer][(deckCounter - 3)] = cutpurse;
        1:   32:    state.deck[thisPlayer][(deckCounter - 4)] = silver;
        1:   33:    state.hand[thisPlayer][handPos] = adventurer;
        1:   34:    state.hand[thisPlayer][handPos + 1] = curse;
        1:   35:    state.hand[thisPlayer][handPos + 2] = curse;
        1:   36:    state.hand[thisPlayer][handPos+3] = curse;
        1:   37:    state.handCount[thisPlayer] = 4;
        1:   38:    state.whoseTurn = thisPlayer;
        -:   39:    //int expectedCards[2] = {state.deck[thisPlayer][(deckCounter - 2)], state.deck[thisPlayer][(deckCounter - 4)]};
        -:   40:    
        1:   41:    memcpy(&testState, &state, sizeof(struct gameState));
        -:   42:     
        1:   43:    printf("\n\nTESTING ADVENTURER\n\n");
        1:   44:    cardEffect(adventurer, 0, 0, 0, &testState, handPos, &bonus);
        -:   45:    
        1:   46:    if (testState.handCount[thisPlayer] == (state.handCount[thisPlayer] + drawn - discarded)) {
    #####:   47:        printf("HANDCOUNT INCREASE TEST: PASSED\n");
        -:   48:    }
        -:   49:    else {
        1:   50:        printf("HANDCOUNT INCREASE TEST: FAILED\n");
        1:   51:        testPassed = 0;
        -:   52:    }
        -:   53:     
        1:   54:    if (testState.deckCount[thisPlayer] == (state.deckCount[thisPlayer] - drawn)) {
        1:   55:        printf("DECKCOUNT DECREASE TEST: PASSED\n");
        -:   56:    }
        -:   57:    else {
    #####:   58:        printf("DECKCOUNT DECREASE TEST: FAILED\n");
    #####:   59:        testPassed = 0;
        -:   60:    }
        -:   61:    
        1:   62:    if ((testState.playedCards[(testState.playedCardCount - 1)] == state.hand[thisPlayer][handPos])
    #####:   63:    && (testState.playedCardCount == state.playedCardCount + 1)) {
    #####:   64:        printf("PLAYEDCARD HAS PLAYED CARD TEST: PASSED\n");
    #####:   65:        printf("PLAYEDCARDCOUNT INCREASE TEST: PASSED\n");
        -:   66:    }
        -:   67:    else {
        1:   68:        printf("PLAYEDCARD HAS PLAYED CARD TEST: FAILED\n");
        1:   69:        printf("PLAYEDCARDCOUNT INCREASE TEST: FAILED\n");
        1:   70:        testPassed = 0;
        -:   71:    }
        -:   72:    
        1:   73:    if ((testState.hand[thisPlayer][handPos] == silver)) {
        -:   74:
    #####:   75:        printf("PLAYED CARD'S POSITION OCCUPIED BY NEW CARD TEST: PASSED\n");
        -:   76:    }    
        -:   77:    else {
        1:   78:        printf("PLAYED CARD'S POSITION OCCUPIED BY NEW CARD TEST: FAILED\n");
        1:   79:        testPassed = 0;
        -:   80:    }
        -:   81:
        1:   82:    if (testState.hand[thisPlayer][(testState.handCount[thisPlayer])] == -1) {
    #####:   83:        printf("POSITION FORMERLY OCCUPIED NOW VALUED AT -1 TEST: PASSED\n");
        -:   84:    }
        -:   85:    else {
        1:   86:        printf("POSITION FORMERLY OCCUPIED NOW VALUED AT -1 TEST: FAILED\n");
        1:   87:        testPassed = 0;
        -:   88:    }
        -:   89:
        1:   90:    if ((testState.hand[thisPlayer][handPos] == silver)
    #####:   91:    && (testState.hand[thisPlayer][ (testState.handCount[thisPlayer] - 1)] == copper)) {
    #####:   92:        printf("CARDS DRAWN ARE THE CORRECT CARDS AND IN CORRECT HAND POSITION TEST: PASSED\n");
        -:   93:
        -:   94:    }
        -:   95:    else {
        1:   96:        printf("CARDS DRAWN ARE THE CORRECT CARDS AND IN THE CORRECT HAND POSITION TEST: FAILED\n");
        1:   97:        testPassed = 0;
        -:   98:    }
        -:   99:
        1:  100:    if (testState.handCount[otherPlayer] == state.handCount[otherPlayer]) {
        1:  101:        printf("HANDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: PASSED\n");
        -:  102:    }
        -:  103:    else {
    #####:  104:        printf("HANDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: FAILED\n");
    #####:  105:        printf("ENDING TEST TO AVOID CRASH\n");
    #####:  106:        return 0;
        -:  107:    }
        -:  108:
        1:  109:    if (testState.deckCount[otherPlayer] == state.deckCount[otherPlayer]) {
        1:  110:        printf("DECKCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: PASSED\n");
        -:  111:    }
        -:  112:    else {
    #####:  113:        printf("DECKCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: FAILED\n");
    #####:  114:        printf("ENDING TEST TO AVOID CRASH\n");
    #####:  115:        return 0;
        -:  116:    }
        -:  117:
        1:  118:    if (testState.discardCount[otherPlayer] == state.discardCount[otherPlayer]) {
        1:  119:        printf("DISCARDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: PASSED\n");
        -:  120:    }
        -:  121:    else {
    #####:  122:        printf("DISCARDCOUNT OF OTHER PLAYER DIDN'T CHANGE TEST: FAILED\n");
    #####:  123:        printf("ENDING TEST TO AVOID CRASH\n");
    #####:  124:        return 0;
        -:  125:    }
        -:  126:    
        1:  127:    int changeTestPass = 1;
        -:  128:
        6:  129:    for (i = 0; i < testState.handCount[otherPlayer]; i++) {
        5:  130:        if (testState.hand[otherPlayer][i] != state.hand[otherPlayer][i]) {
    #####:  131:            printf("OTHER PLAYER'S HAND NOT AFFECTED TEST: FAILED\n");
    #####:  132:            testPassed = 0;
    #####:  133:            changeTestPass = 0;
        -:  134:        }
        -:  135:    }
        -:  136:
        1:  137:    if (changeTestPass == 1) {
        1:  138:        printf("OTHER PLAYER'S HAND NOT AFFECTED TEST: PASSED\n");
        -:  139:    }
        1:  140:    changeTestPass = 1;
        -:  141:
        6:  142:    for (i = 0; i < testState.deckCount[otherPlayer]; i++) {
        5:  143:        if (testState.deck[otherPlayer][i] != state.deck[otherPlayer][i]) {
    #####:  144:            printf("OTHER PLAYER'S DECK NOT AFFECTED TEST: FAILED\n");
    #####:  145:            testPassed = 0;
    #####:  146:            changeTestPass = 0;
        -:  147:        }
        -:  148:    }
        -:  149:
        1:  150:    if (changeTestPass == 1) {
        1:  151:        printf("OTHER PLAYER'S DECK NOT AFFECTED TEST: PASSED\n");
        -:  152:    }
        1:  153:    changeTestPass = 1;
        -:  154:
        -:  155:
        1:  156:    for (i = 0; i < testState.discardCount[otherPlayer]; i++) {
    #####:  157:        if (testState.discard[otherPlayer][i] != state.discard[otherPlayer][i]) {
    #####:  158:            printf("OTHER PLAYER'S DISCARD PILE NOT AFFECTED TEST: FAILED\n");
    #####:  159:            testPassed = 0;
    #####:  160:            changeTestPass = 0;
        -:  161:        }
        -:  162:    }
        -:  163:
        1:  164:    if (changeTestPass == 1) {
        1:  165:        printf("OTHER PLAYER'S DISCARD PILE NOT AFFECTED TEST: PASSED\n");
        -:  166:    }
        1:  167:    changeTestPass = 1;
        -:  168:
       21:  169:    for (i = adventurer; i <= treasure_map; i++) {
       20:  170:        if (testState.supplyCount[i] != state.supplyCount[i]) {
    #####:  171:            printf("VICTORY AND KINGDOM CARDS NOT AFFECTED TEST: FAILED\n");
    #####:  172:            changeTestPass = 0;
    #####:  173:            testPassed = 0;
        -:  174:        }
        -:  175:    }
        -:  176:
        1:  177:    if (changeTestPass == 1) {
        1:  178:        printf("VICTORY AND KINGDOM CARDS NOT AFFECTED TEST: PASSED\n");
        -:  179:    }
        -:  180:    
        1:  181:    return testPassed;
        -:  182:}
        -:  183:
        -:  184:
        -:  185:
        -:  186:
        1:  187:int main() 
        -:  188:{
        1:  189:    int result = testAdventurer();
        1:  190:    if (result == 1) {
    #####:  191:        printf("\nADVENTURER TESTS PASSED\n\n");
        -:  192:    }
        -:  193:    else {
        1:  194:        printf("\nADVENTURER TEST(S) FAILED\n\n");
        -:  195:    }
        -:  196:
        1:  197:    return 0;
        -:  198:}
